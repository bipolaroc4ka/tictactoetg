from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import random

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
def create_board():
    return [[" " for _ in range(3)] for _ in range(3)]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
def check_winner(board, symbol):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏, —Å—Ç–æ–ª–±—Ü—ã –∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    for row in board:
        if all(cell == symbol for cell in row):
            return True
    for col in range(3):
        if all(board[row][col] == symbol for row in range(3)):
            return True
    if all(board[i][i] == symbol for i in range(3)) or all(board[i][2 - i] == symbol for i in range(3)):
        return True
    return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é
def check_draw(board):
    return all(cell != " " for row in board for cell in row)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def generate_keyboard(board):
    keyboard = []
    for i, row in enumerate(board):
        buttons = [
            InlineKeyboardButton(f"{cell if cell != ' ' else ' '}", callback_data=f"{i}-{j}")
            if cell == " " else InlineKeyboardButton(f"{cell}", callback_data="taken")
            for j, cell in enumerate(row)
        ]
        keyboard.append(buttons)
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    board = create_board()
    context.user_data["board"] = board
    context.user_data["player"] = "X"
    await update.message.reply_text("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ X.", reply_markup=generate_keyboard(board))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    board = context.user_data["board"]
    player = context.user_data["player"]

    if data == "taken":
        await query.edit_message_text("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!", reply_markup=generate_keyboard(board))
        return

    # –†–∞–∑–±–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    x, y = map(int, data.split("-"))

    # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
    if board[x][y] == " ":
        board[x][y] = player
        if check_winner(board, player):
            await query.edit_message_text(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ", reply_markup=generate_keyboard(board))
            return
        if check_draw(board):
            await query.edit_message_text("–ù–∏—á—å—è! ü§ù", reply_markup=generate_keyboard(board))
            return

        # –•–æ–¥ –±–æ—Ç–∞
        bot_move(board, "O")
        if check_winner(board, "O"):
            await query.edit_message_text(f"–ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª! ü§ñ", reply_markup=generate_keyboard(board))
            return
        if check_draw(board):
            await query.edit_message_text("–ù–∏—á—å—è! ü§ù", reply_markup=generate_keyboard(board))
            return

    await query.edit_message_text("–í–∞—à —Ö–æ–¥!", reply_markup=generate_keyboard(board))

# –•–æ–¥ –±–æ—Ç–∞
def bot_move(board, symbol):
    empty_cells = [(i, j) for i, row in enumerate(board) for j, cell in enumerate(row) if cell == " "]
    if empty_cells:
        x, y = random.choice(empty_cells)
        board[x][y] = symbol

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    application = Application.builder().token("Your Token").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
